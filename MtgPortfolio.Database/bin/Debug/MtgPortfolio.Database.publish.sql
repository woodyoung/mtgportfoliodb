/*
Deployment script for MtgPortfolio

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MtgPortfolio"
:setvar DefaultFilePrefix "MtgPortfolio"
:setvar DefaultDataPath "C:\Users\wyoung\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\wyoung\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Codes]...';


GO
CREATE SCHEMA [Codes]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Codes].[Color]...';


GO
CREATE TABLE [Codes].[Color] (
    [ColorId]     INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_ColorId] PRIMARY KEY CLUSTERED ([ColorId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Layout]...';


GO
CREATE TABLE [Codes].[Layout] (
    [LayoutId]    INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_LayoutId] PRIMARY KEY CLUSTERED ([LayoutId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Set]...';


GO
CREATE TABLE [Codes].[Set] (
    [SetId]       INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [ReleaseDate] DATE         NOT NULL,
    [BorderId]    INT          NOT NULL,
    [MkmName]     VARCHAR (50) NOT NULL,
    [MkmId]       INT          NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_SetId] PRIMARY KEY CLUSTERED ([SetId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Border]...';


GO
CREATE TABLE [Codes].[Border] (
    [BorderId]    INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_BorderId] PRIMARY KEY CLUSTERED ([BorderId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Format]...';


GO
CREATE TABLE [Codes].[Format] (
    [FormatId]    INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NULL,
    CONSTRAINT [DF_Format_Up,
	CONSTRAINT [PK_FormatId] PRIMARY KEY CLUSTERED ([FormatId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Legality]...';


GO
CREATE TABLE [Codes].[Legality] (
    [LegalityId]  INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_LegalityId] PRIMARY KEY CLUSTERED ([LegalityId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Rarity]...';


GO
CREATE TABLE [Codes].[Rarity] (
    [RarityId]    INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_RarityId] PRIMARY KEY CLUSTERED ([RarityId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Subtype]...';


GO
CREATE TABLE [Codes].[Subtype] (
    [SubtypeId]   INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_SubtypeId] PRIMARY KEY CLUSTERED ([SubtypeId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [Codes].[Type]...';


GO
CREATE TABLE [Codes].[Type] (
    [TypeId]      INT          IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (20) NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [CreatedBy]   VARCHAR (50) NOT NULL,
    [CreatedOn]   DATETIME     NOT NULL,
    [UpdatedBy]   VARCHAR (50) NOT NULL,
    [UpdatedOn]   DATETIME     NOT NULL,
    [IsActive]    BIT          NOT NULL,
    CONSTRAINT [PK_TypeId] PRIMARY KEY CLUSTERED ([TypeId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[Legalities]...';


GO
CREATE TABLE [dbo].[Legalities] (
    [LegalitiesId] INT IDENTITY (1, 1) NOT NULL,
    [MtgCardId]    INT NOT NULL,
    [FormatId]     INT NOT NULL,
    [LegalityId]   INT NOT NULL,
    CONSTRAINT [PK_LegalitiesId] PRIMARY KEY CLUSTERED ([LegalitiesId] ASC) ON [PRIMARY],
    CONSTRAINT [UQ_Legalities_MtgCardId_FormatId_LegalityId] UNIQUE NONCLUSTERED ([MtgCardId] ASC, [FormatId] ASC, [LegalityId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[MtgCard]...';


GO
CREATE TABLE [dbo].[MtgCard] (
    [MtgCardId]         INT             IDENTITY (1, 1) NOT NULL,
    [Artist]            VARCHAR (100)   NULL,
    [ConvertedManaCost] DECIMAL (5, 2)  NOT NULL,
    [MtgJsonId]         VARCHAR (50)    NULL,
    [LayoutId]          INT             NOT NULL,
    [ManaCost]          VARCHAR (20)    NOT NULL,
    [MultiverseId]      BIGINT          NULL,
    [Name]              VARCHAR (160)   NULL,
    [Number]            VARCHAR (10)    NULL,
    [OriginalText]      VARCHAR (1000)  NULL,
    [OriginalType]      NVARCHAR (100)  NULL,
    [Power]             DECIMAL (5, 2)  NULL,
    [Toughness]         DECIMAL (5, 2)  NULL,
    [RarityId]          INT             NOT NULL,
    [Type]              VARCHAR (100)   NULL,
    [Text]              NVARCHAR (1000) NULL,
    [SetId]             INT             NOT NULL,
    CONSTRAINT [PK_MtgCardId] PRIMARY KEY CLUSTERED ([MtgCardId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[MtgCardColor]...';


GO
CREATE TABLE [dbo].[MtgCardColor] (
    [MtgCardColorId] INT IDENTITY (1, 1) NOT NULL,
    [MtgCardId]      INT NOT NULL,
    [ColorId]        INT NOT NULL
);


GO
PRINT N'Creating [dbo].[MtgCardSets]...';


GO
CREATE TABLE [dbo].[MtgCardSets] (
    [MtgCardSetsId] INT IDENTITY (1, 1) NOT NULL,
    [MtgCardId]     INT NOT NULL,
    [SetId]         INT NOT NULL,
    CONSTRAINT [UQ_MtgCardId_SetId] UNIQUE NONCLUSTERED ([MtgCardId] ASC, [SetId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[MtgCardSubtypes]...';


GO
CREATE TABLE [dbo].[MtgCardSubtypes] (
    [MtgCardSubtypesId] INT IDENTITY (1, 1) NOT NULL,
    [MtgCardId]         INT NOT NULL,
    [SubtypeId]         INT NOT NULL
);


GO
PRINT N'Creating [dbo].[MtgCardTypes]...';


GO
CREATE TABLE [dbo].[MtgCardTypes] (
    [MtgCardTypesId] INT IDENTITY (1, 1) NOT NULL,
    [MtgCardId]      INT NOT NULL,
    [TypeId]         INT NOT NULL
);


GO
PRINT N'Creating [Codes].[DF_Color_CreatedBy]...';


GO
ALTER TABLE [Codes].[Color]
    ADD CONSTRAINT [DF_Color_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Color_CreatedOn]...';


GO
ALTER TABLE [Codes].[Color]
    ADD CONSTRAINT [DF_Color_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Color_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Color]
    ADD CONSTRAINT [DF_Color_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Color_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Color]
    ADD CONSTRAINT [DF_Color_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Color]...';


GO
ALTER TABLE [Codes].[Color]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Layout_CreatedBy]...';


GO
ALTER TABLE [Codes].[Layout]
    ADD CONSTRAINT [DF_Layout_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Layout_CreatedOn]...';


GO
ALTER TABLE [Codes].[Layout]
    ADD CONSTRAINT [DF_Layout_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Layout_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Layout]
    ADD CONSTRAINT [DF_Layout_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Layout_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Layout]
    ADD CONSTRAINT [DF_Layout_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Layout]...';


GO
ALTER TABLE [Codes].[Layout]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Set_CreatedBy]...';


GO
ALTER TABLE [Codes].[Set]
    ADD CONSTRAINT [DF_Set_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Set_CreatedOn]...';


GO
ALTER TABLE [Codes].[Set]
    ADD CONSTRAINT [DF_Set_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Set_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Set]
    ADD CONSTRAINT [DF_Set_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Set_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Set]
    ADD CONSTRAINT [DF_Set_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Set]...';


GO
ALTER TABLE [Codes].[Set]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Border_CreatedBy]...';


GO
ALTER TABLE [Codes].[Border]
    ADD CONSTRAINT [DF_Border_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Border_CreatedOn]...';


GO
ALTER TABLE [Codes].[Border]
    ADD CONSTRAINT [DF_Border_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Border_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Border]
    ADD CONSTRAINT [DF_Border_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Border_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Border]
    ADD CONSTRAINT [DF_Border_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Border]...';


GO
ALTER TABLE [Codes].[Border]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Format_CreatedBy]...';


GO
ALTER TABLE [Codes].[Format]
    ADD CONSTRAINT [DF_Format_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Format_CreatedOn]...';


GO
ALTER TABLE [Codes].[Format]
    ADD CONSTRAINT [DF_Format_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Format_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Format]
    ADD CONSTRAINT [DF_Format_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Legality_CreatedBy]...';


GO
ALTER TABLE [Codes].[Legality]
    ADD CONSTRAINT [DF_Legality_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Legality_CreatedOn]...';


GO
ALTER TABLE [Codes].[Legality]
    ADD CONSTRAINT [DF_Legality_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Legality_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Legality]
    ADD CONSTRAINT [DF_Legality_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Legality_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Legality]
    ADD CONSTRAINT [DF_Legality_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Legality]...';


GO
ALTER TABLE [Codes].[Legality]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Rarity_CreatedBy]...';


GO
ALTER TABLE [Codes].[Rarity]
    ADD CONSTRAINT [DF_Rarity_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Rarity_CreatedOn]...';


GO
ALTER TABLE [Codes].[Rarity]
    ADD CONSTRAINT [DF_Rarity_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Rarity_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Rarity]
    ADD CONSTRAINT [DF_Rarity_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Rarity_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Rarity]
    ADD CONSTRAINT [DF_Rarity_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Rarity]...';


GO
ALTER TABLE [Codes].[Rarity]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Subtype_CreatedBy]...';


GO
ALTER TABLE [Codes].[Subtype]
    ADD CONSTRAINT [DF_Subtype_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Subtype_CreatedOn]...';


GO
ALTER TABLE [Codes].[Subtype]
    ADD CONSTRAINT [DF_Subtype_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Subtype_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Subtype]
    ADD CONSTRAINT [DF_Subtype_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Subtype_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Subtype]
    ADD CONSTRAINT [DF_Subtype_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Subtype]...';


GO
ALTER TABLE [Codes].[Subtype]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [Codes].[DF_Type_CreatedBy]...';


GO
ALTER TABLE [Codes].[Type]
    ADD CONSTRAINT [DF_Type_CreatedBy] DEFAULT (suser_name()) FOR [CreatedBy];


GO
PRINT N'Creating [Codes].[DF_Type_CreatedOn]...';


GO
ALTER TABLE [Codes].[Type]
    ADD CONSTRAINT [DF_Type_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Codes].[DF_Type_UpdatedBy]...';


GO
ALTER TABLE [Codes].[Type]
    ADD CONSTRAINT [DF_Type_UpdatedBy] DEFAULT (suser_name()) FOR [UpdatedBy];


GO
PRINT N'Creating [Codes].[DF_Type_UpdatedOn]...';


GO
ALTER TABLE [Codes].[Type]
    ADD CONSTRAINT [DF_Type_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [Codes].[Type]...';


GO
ALTER TABLE [Codes].[Type]
    ADD DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_MtgCard_ConvertedManaCost]...';


GO
ALTER TABLE [dbo].[MtgCard]
    ADD CONSTRAINT [DF_MtgCard_ConvertedManaCost] DEFAULT 0 FOR [ConvertedManaCost];


GO
PRINT N'Creating [dbo].[DF_MtgCard_ManaCost]...';


GO
ALTER TABLE [dbo].[MtgCard]
    ADD CONSTRAINT [DF_MtgCard_ManaCost] DEFAULT '' FOR [ManaCost];


GO
PRINT N'Creating [Codes].[FK_Set_Border]...';


GO
ALTER TABLE [Codes].[Set]
    ADD CONSTRAINT [FK_Set_Border] FOREIGN KEY ([BorderId]) REFERENCES [Codes].[Border] ([BorderId]);


GO
PRINT N'Creating [dbo].[FK_Legalities_MtgCard]...';


GO
ALTER TABLE [dbo].[Legalities]
    ADD CONSTRAINT [FK_Legalities_MtgCard] FOREIGN KEY ([MtgCardId]) REFERENCES [dbo].[MtgCard] ([MtgCardId]);


GO
PRINT N'Creating [dbo].[FK_Legalities_Format]...';


GO
ALTER TABLE [dbo].[Legalities]
    ADD CONSTRAINT [FK_Legalities_Format] FOREIGN KEY ([FormatId]) REFERENCES [Codes].[Format] ([FormatId]);


GO
PRINT N'Creating [dbo].[FK_Legalities_Legality]...';


GO
ALTER TABLE [dbo].[Legalities]
    ADD CONSTRAINT [FK_Legalities_Legality] FOREIGN KEY ([LegalityId]) REFERENCES [Codes].[Legality] ([LegalityId]);


GO
PRINT N'Creating [dbo].[FK_MtgCard_Layout]...';


GO
ALTER TABLE [dbo].[MtgCard]
    ADD CONSTRAINT [FK_MtgCard_Layout] FOREIGN KEY ([LayoutId]) REFERENCES [Codes].[Layout] ([LayoutId]);


GO
PRINT N'Creating [dbo].[FK_MtgCard_Rarity]...';


GO
ALTER TABLE [dbo].[MtgCard]
    ADD CONSTRAINT [FK_MtgCard_Rarity] FOREIGN KEY ([RarityId]) REFERENCES [Codes].[Rarity] ([RarityId]);


GO
PRINT N'Creating [dbo].[FK_MtgCard_Set]...';


GO
ALTER TABLE [dbo].[MtgCard]
    ADD CONSTRAINT [FK_MtgCard_Set] FOREIGN KEY ([SetId]) REFERENCES [Codes].[Set] ([SetId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardColor_Color]...';


GO
ALTER TABLE [dbo].[MtgCardColor]
    ADD CONSTRAINT [FK_MtgCardColor_Color] FOREIGN KEY ([ColorId]) REFERENCES [Codes].[Color] ([ColorId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardColor_MtgCard]...';


GO
ALTER TABLE [dbo].[MtgCardColor]
    ADD CONSTRAINT [FK_MtgCardColor_MtgCard] FOREIGN KEY ([MtgCardId]) REFERENCES [dbo].[MtgCard] ([MtgCardId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardSets_Type]...';


GO
ALTER TABLE [dbo].[MtgCardSets]
    ADD CONSTRAINT [FK_MtgCardSets_Type] FOREIGN KEY ([SetId]) REFERENCES [Codes].[Set] ([SetId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardSets_MtgCard]...';


GO
ALTER TABLE [dbo].[MtgCardSets]
    ADD CONSTRAINT [FK_MtgCardSets_MtgCard] FOREIGN KEY ([MtgCardId]) REFERENCES [dbo].[MtgCard] ([MtgCardId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardSubtypes_Type]...';


GO
ALTER TABLE [dbo].[MtgCardSubtypes]
    ADD CONSTRAINT [FK_MtgCardSubtypes_Type] FOREIGN KEY ([SubtypeId]) REFERENCES [Codes].[Subtype] ([SubtypeId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardSubtypes_MtgCard]...';


GO
ALTER TABLE [dbo].[MtgCardSubtypes]
    ADD CONSTRAINT [FK_MtgCardSubtypes_MtgCard] FOREIGN KEY ([MtgCardId]) REFERENCES [dbo].[MtgCard] ([MtgCardId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardTypes_Type]...';


GO
ALTER TABLE [dbo].[MtgCardTypes]
    ADD CONSTRAINT [FK_MtgCardTypes_Type] FOREIGN KEY ([TypeId]) REFERENCES [Codes].[Type] ([TypeId]);


GO
PRINT N'Creating [dbo].[FK_MtgCardTypes_MtgCard]...';


GO
ALTER TABLE [dbo].[MtgCardTypes]
    ADD CONSTRAINT [FK_MtgCardTypes_MtgCard] FOREIGN KEY ([MtgCardId]) REFERENCES [dbo].[MtgCard] ([MtgCardId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '496b625e-fc5d-4953-a493-a79bfb4c9e4e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('496b625e-fc5d-4953-a493-a79bfb4c9e4e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f71acada-c425-448c-93e7-b563d0e246ed')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f71acada-c425-448c-93e7-b563d0e246ed')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a8886076-9051-462d-8ebe-3c299d9d0ff7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a8886076-9051-462d-8ebe-3c299d9d0ff7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22ab5de6-b377-4fb7-b75d-4d3496086660')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22ab5de6-b377-4fb7-b75d-4d3496086660')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
